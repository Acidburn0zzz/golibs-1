// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

package impl

import "math/bits"

// IntStack is an auto-growing stack.
type IntStack struct {
	a []int
	i int
}

// DefaultIntStackLen is the default size of a IntStack that
// is created with a non-positive size.
const DefaultIntStackLen = 8

// NewIntStack returns a new stack that can accommodate at least size items,
// or DefaultStackLen if size <= 0.
func NewIntStack(size int) *IntStack {
	if size <= 0 {
		size = DefaultIntStackLen
	}
	return &IntStack{
		a: make([]int, 1<<uint(bits.Len(uint(size-1)))),
		i: -1,
	}
}

// Len returns the current number of pushed elements.
func (s *IntStack) Len() int {
	return s.i + 1
}

// Push a new element onto the stack. If adding this element would overflow
// the stack, the current stack is moved to a new IntStack twice the
// size of the original before adding the element.
func (s *IntStack) Push(x int) {
	if s.i == len(s.a)-1 {
		s.Grow(1)
	}
	s.i++
	s.a[s.i] = x
}

// Pop removes and returns the top element from the stack. Calling Pop on an
// empty stack results in a panic.
func (s *IntStack) Pop() int {
	if s.Len() == 0 {
		panic("stack underflow")
	}
	s.i--
	return s.a[s.i+1]
}

// Peek returns the top element from the stack without removing it. Peeking an
// empty stack results in a panic.
func (s *IntStack) Peek() int {
	if s.Len() == 0 {
		panic("cannot peek empty IntStack")
	}

	return s.a[s.i]
}

// Reset the stack so that its length is zero.
// Note that the internal slice is NOT cleared.
func (s *IntStack) Reset() {
	s.i = -1
}

// Grow internal slice to accommodate at least n more items.
func (s *IntStack) Grow(n int) {
	// We do not check to see if n <= cap(q.a) - len(q.a) because we'll
	// never have unused capacity.
	if n <= 0 {
		return
	}

	a := make([]int, 1<<uint(bits.Len(uint(len(s.a)+n-1))))
	copy(a, s.a)

	s.a = a
}

// GetSlicePointer returns a pointer to the backing slice of this IntStack.
// *WARNING* Use at your own risk.
func (s *IntStack) GetSlicePointer() *[]int { return &s.a }
