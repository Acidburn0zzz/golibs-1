// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

package genericbenchmarks

func QuicksortPersonSlice(v []Person) {
	switch len(v) {
	case 0, 1:
		return
	case 2:
		if v[1].Less(&v[0]) {
			v[0], v[1] = v[1], v[0]
		}
		return
	case 3:
		if v[1].Less(&v[0]) {
			v[0], v[1] = v[1], v[0]
		}
		if v[2].Less(&v[1]) {
			v[1], v[2] = v[2], v[1]
		}
		if v[1].Less(&v[0]) {
			v[0], v[1] = v[1], v[0]
		}
		return
	}

	i := PartitionPersonSlice(v)
	QuicksortPersonSlice(v[:i+1])
	QuicksortPersonSlice(v[i+1:])
}

// Hoare's partitioning with median of first, middle, and last as pivot
func PartitionPersonSlice(v []Person) int {
	var pivot Person

	if len(v) > 16 {
		pivot = MedianOfThreePersonM(v)
	} else {
		pivot = v[(len(v)-1)/2]
	}

	i, j := -1, len(v)

	for {
		for {
			i++
			if !v[i].Less(&pivot) {
				break
			}
		}

		for {
			j--
			if !pivot.Less(&v[j]) {
				break
			}
		}

		if i < j {
			v[i], v[j] = v[j], v[i]
		} else {
			return j
		}
	}
}

func MedianOfThreePersonM(v []Person) Person {
	a := v[0]
	b := v[(len(v)-1)/2]
	c := v[len(v)-1]

	if b.Less(&a) {
		a, b = b, a
	}
	if c.Less(&b) {
		b, c = c, b
	}
	if b.Less(&a) {
		a, b = b, a
	}

	return b
}
