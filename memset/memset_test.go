// This file was generated by gen_memset.rb and should not be edited by hand.

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

package memset

import (
	"reflect"
	"testing"
)

func TestInt(t *testing.T) {
	a := make([]int, 1024)
	b := make([]int, len(a))
	c := make([]int, len(a))

	Int(a, 0x7f)
	_Int(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Int(a, 0)
	_Int(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestInt8(t *testing.T) {
	a := make([]int8, 1024)
	b := make([]int8, len(a))
	c := make([]int8, len(a))

	Int8(a, 0x7f)
	_Int8(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Int8(a, 0)
	_Int8(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestInt16(t *testing.T) {
	a := make([]int16, 1024)
	b := make([]int16, len(a))
	c := make([]int16, len(a))

	Int16(a, 0x7f)
	_Int16(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Int16(a, 0)
	_Int16(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestInt32(t *testing.T) {
	a := make([]int32, 1024)
	b := make([]int32, len(a))
	c := make([]int32, len(a))

	Int32(a, 0x7f)
	_Int32(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Int32(a, 0)
	_Int32(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestInt64(t *testing.T) {
	a := make([]int64, 1024)
	b := make([]int64, len(a))
	c := make([]int64, len(a))

	Int64(a, 0x7f)
	_Int64(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Int64(a, 0)
	_Int64(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestUint(t *testing.T) {
	a := make([]uint, 1024)
	b := make([]uint, len(a))
	c := make([]uint, len(a))

	Uint(a, 0x7f)
	_Uint(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Uint(a, 0)
	_Uint(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestByte(t *testing.T) {
	a := make([]byte, 1024)
	b := make([]byte, len(a))
	c := make([]byte, len(a))

	Byte(a, 0x7f)
	_Byte(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Byte(a, 0)
	_Byte(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestUint16(t *testing.T) {
	a := make([]uint16, 1024)
	b := make([]uint16, len(a))
	c := make([]uint16, len(a))

	Uint16(a, 0x7f)
	_Uint16(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Uint16(a, 0)
	_Uint16(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestUint32(t *testing.T) {
	a := make([]uint32, 1024)
	b := make([]uint32, len(a))
	c := make([]uint32, len(a))

	Uint32(a, 0x7f)
	_Uint32(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Uint32(a, 0)
	_Uint32(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestUint64(t *testing.T) {
	a := make([]uint64, 1024)
	b := make([]uint64, len(a))
	c := make([]uint64, len(a))

	Uint64(a, 0x7f)
	_Uint64(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Uint64(a, 0)
	_Uint64(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestUintptr(t *testing.T) {
	a := make([]uintptr, 1024)
	b := make([]uintptr, len(a))
	c := make([]uintptr, len(a))

	Uintptr(a, 0x7f)
	_Uintptr(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Uintptr(a, 0)
	_Uintptr(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestFloat32(t *testing.T) {
	a := make([]float32, 1024)
	b := make([]float32, len(a))
	c := make([]float32, len(a))

	Float32(a, 0x7f)
	_Float32(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Float32(a, 0)
	_Float32(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestFloat64(t *testing.T) {
	a := make([]float64, 1024)
	b := make([]float64, len(a))
	c := make([]float64, len(a))

	Float64(a, 0x7f)
	_Float64(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Float64(a, 0)
	_Float64(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}
