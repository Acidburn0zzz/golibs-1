// This file was generated by gen_memset.rb and should not be edited by hand.

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

package memset

// Int fills a []int with value n.
func Int(s []int, n int)
func _Int(s []int, n int) {
	for i := range s {
		s[i] = n
	}
}

// Int8 fills a []int8 with value n.
func Int8(s []int8, n int8)
func _Int8(s []int8, n int8) {
	for i := range s {
		s[i] = n
	}
}

// Int16 fills a []int16 with value n.
func Int16(s []int16, n int16)
func _Int16(s []int16, n int16) {
	for i := range s {
		s[i] = n
	}
}

// Int32 fills a []int32 with value n.
func Int32(s []int32, n int32)
func _Int32(s []int32, n int32) {
	for i := range s {
		s[i] = n
	}
}

// Int64 fills a []int64 with value n.
func Int64(s []int64, n int64)
func _Int64(s []int64, n int64) {
	for i := range s {
		s[i] = n
	}
}

// Uint fills a []uint with value n.
func Uint(s []uint, n uint)
func _Uint(s []uint, n uint) {
	for i := range s {
		s[i] = n
	}
}

// Byte fills a []byte with value n.
func Byte(s []byte, n byte)
func _Byte(s []byte, n byte) {
	for i := range s {
		s[i] = n
	}
}

// Uint16 fills a []uint16 with value n.
func Uint16(s []uint16, n uint16)
func _Uint16(s []uint16, n uint16) {
	for i := range s {
		s[i] = n
	}
}

// Uint32 fills a []uint32 with value n.
func Uint32(s []uint32, n uint32)
func _Uint32(s []uint32, n uint32) {
	for i := range s {
		s[i] = n
	}
}

// Uint64 fills a []uint64 with value n.
func Uint64(s []uint64, n uint64)
func _Uint64(s []uint64, n uint64) {
	for i := range s {
		s[i] = n
	}
}

// Uintptr fills a []uintptr with value n.
func Uintptr(s []uintptr, n uintptr)
func _Uintptr(s []uintptr, n uintptr) {
	for i := range s {
		s[i] = n
	}
}

// Float32 fills a []float32 with value n.
func Float32(s []float32, n float32)
func _Float32(s []float32, n float32) {
	for i := range s {
		s[i] = n
	}
}

// Float64 fills a []float64 with value n.
func Float64(s []float64, n float64)
func _Float64(s []float64, n float64) {
	for i := range s {
		s[i] = n
	}
}
