// This file was generated by gen_memset.rb and should not be edited by hand.

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

#include "textflag.h"

// func Int(s []int, n int)
TEXT ·Int(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVQ n+24(FP), AX
	REP
	STOSQ               // memset(data, n, len)
	RET

// func Int8(s []int8, n int8)
TEXT ·Int8(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVB n+24(FP), AX
	REP
	STOSB               // memset(data, n, len)
	RET

// func Int16(s []int16, n int16)
TEXT ·Int16(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVW n+24(FP), AX
	REP
	STOSW               // memset(data, n, len)
	RET

// func Int32(s []int32, n int32)
TEXT ·Int32(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVL n+24(FP), AX
	REP
	STOSL               // memset(data, n, len)
	RET

// func Int64(s []int64, n int64)
TEXT ·Int64(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVQ n+24(FP), AX
	REP
	STOSQ               // memset(data, n, len)
	RET

// func Uint(s []uint, n uint)
TEXT ·Uint(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVQ n+24(FP), AX
	REP
	STOSQ               // memset(data, n, len)
	RET

// func Byte(s []byte, n byte)
TEXT ·Byte(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVB n+24(FP), AX
	REP
	STOSB               // memset(data, n, len)
	RET

// func Uint16(s []uint16, n uint16)
TEXT ·Uint16(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVW n+24(FP), AX
	REP
	STOSW               // memset(data, n, len)
	RET

// func Uint32(s []uint32, n uint32)
TEXT ·Uint32(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVL n+24(FP), AX
	REP
	STOSL               // memset(data, n, len)
	RET

// func Uint64(s []uint64, n uint64)
TEXT ·Uint64(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVQ n+24(FP), AX
	REP
	STOSQ               // memset(data, n, len)
	RET

// func Uintptr(s []uintptr, n uintptr)
TEXT ·Uintptr(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVQ n+24(FP), AX
	REP
	STOSQ               // memset(data, n, len)
	RET

// func Float32(s []float32, n float32)
TEXT ·Float32(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVL n+24(FP), AX
	REP
	STOSL               // memset(data, n, len)
	RET

// func Float64(s []float64, n float64)
TEXT ·Float64(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOVQ n+24(FP), AX
	REP
	STOSQ               // memset(data, n, len)
	RET
