// This file was generated by gen_memset.rb and should not be edited by hand.

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

package memset

import "testing"

func Benchmark03RangeIntClear8(b *testing.B) {
	s := make([]int, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetIntClear8(b *testing.B) {
	s := make([]int, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0)
	}
}
func Benchmark03RangeIntFill8(b *testing.B) {
	s := make([]int, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetIntFill8(b *testing.B) {
	s := make([]int, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0x7f)
	}
}
func Benchmark03RangeIntClear64(b *testing.B) {
	s := make([]int, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetIntClear64(b *testing.B) {
	s := make([]int, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0)
	}
}
func Benchmark03RangeIntFill64(b *testing.B) {
	s := make([]int, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetIntFill64(b *testing.B) {
	s := make([]int, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0x7f)
	}
}
func Benchmark03RangeIntClear1K(b *testing.B) {
	s := make([]int, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetIntClear1K(b *testing.B) {
	s := make([]int, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0)
	}
}
func Benchmark03RangeIntFill1K(b *testing.B) {
	s := make([]int, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetIntFill1K(b *testing.B) {
	s := make([]int, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0x7f)
	}
}
func Benchmark03RangeIntClear4K(b *testing.B) {
	s := make([]int, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetIntClear4K(b *testing.B) {
	s := make([]int, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0)
	}
}
func Benchmark03RangeIntFill4K(b *testing.B) {
	s := make([]int, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetIntFill4K(b *testing.B) {
	s := make([]int, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0x7f)
	}
}
func Benchmark03RangeIntClear64K(b *testing.B) {
	s := make([]int, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetIntClear64K(b *testing.B) {
	s := make([]int, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0)
	}
}
func Benchmark03RangeIntFill64K(b *testing.B) {
	s := make([]int, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetIntFill64K(b *testing.B) {
	s := make([]int, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0x7f)
	}
}
func Benchmark03RangeIntClear1M(b *testing.B) {
	s := make([]int, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetIntClear1M(b *testing.B) {
	s := make([]int, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0)
	}
}
func Benchmark03RangeIntFill1M(b *testing.B) {
	s := make([]int, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetIntFill1M(b *testing.B) {
	s := make([]int, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int(s, 0x7f)
	}
}

func Benchmark03RangeInt8Clear8(b *testing.B) {
	s := make([]int8, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt8Clear8(b *testing.B) {
	s := make([]int8, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0)
	}
}
func Benchmark03RangeInt8Fill8(b *testing.B) {
	s := make([]int8, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt8Fill8(b *testing.B) {
	s := make([]int8, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0x7f)
	}
}
func Benchmark03RangeInt8Clear64(b *testing.B) {
	s := make([]int8, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt8Clear64(b *testing.B) {
	s := make([]int8, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0)
	}
}
func Benchmark03RangeInt8Fill64(b *testing.B) {
	s := make([]int8, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt8Fill64(b *testing.B) {
	s := make([]int8, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0x7f)
	}
}
func Benchmark03RangeInt8Clear1K(b *testing.B) {
	s := make([]int8, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt8Clear1K(b *testing.B) {
	s := make([]int8, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0)
	}
}
func Benchmark03RangeInt8Fill1K(b *testing.B) {
	s := make([]int8, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt8Fill1K(b *testing.B) {
	s := make([]int8, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0x7f)
	}
}
func Benchmark03RangeInt8Clear4K(b *testing.B) {
	s := make([]int8, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt8Clear4K(b *testing.B) {
	s := make([]int8, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0)
	}
}
func Benchmark03RangeInt8Fill4K(b *testing.B) {
	s := make([]int8, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt8Fill4K(b *testing.B) {
	s := make([]int8, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0x7f)
	}
}
func Benchmark03RangeInt8Clear64K(b *testing.B) {
	s := make([]int8, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt8Clear64K(b *testing.B) {
	s := make([]int8, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0)
	}
}
func Benchmark03RangeInt8Fill64K(b *testing.B) {
	s := make([]int8, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt8Fill64K(b *testing.B) {
	s := make([]int8, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0x7f)
	}
}
func Benchmark03RangeInt8Clear1M(b *testing.B) {
	s := make([]int8, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt8Clear1M(b *testing.B) {
	s := make([]int8, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0)
	}
}
func Benchmark03RangeInt8Fill1M(b *testing.B) {
	s := make([]int8, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt8Fill1M(b *testing.B) {
	s := make([]int8, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int8(s, 0x7f)
	}
}

func Benchmark03RangeInt16Clear8(b *testing.B) {
	s := make([]int16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt16Clear8(b *testing.B) {
	s := make([]int16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0)
	}
}
func Benchmark03RangeInt16Fill8(b *testing.B) {
	s := make([]int16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt16Fill8(b *testing.B) {
	s := make([]int16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0x7f)
	}
}
func Benchmark03RangeInt16Clear64(b *testing.B) {
	s := make([]int16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt16Clear64(b *testing.B) {
	s := make([]int16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0)
	}
}
func Benchmark03RangeInt16Fill64(b *testing.B) {
	s := make([]int16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt16Fill64(b *testing.B) {
	s := make([]int16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0x7f)
	}
}
func Benchmark03RangeInt16Clear1K(b *testing.B) {
	s := make([]int16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt16Clear1K(b *testing.B) {
	s := make([]int16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0)
	}
}
func Benchmark03RangeInt16Fill1K(b *testing.B) {
	s := make([]int16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt16Fill1K(b *testing.B) {
	s := make([]int16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0x7f)
	}
}
func Benchmark03RangeInt16Clear4K(b *testing.B) {
	s := make([]int16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt16Clear4K(b *testing.B) {
	s := make([]int16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0)
	}
}
func Benchmark03RangeInt16Fill4K(b *testing.B) {
	s := make([]int16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt16Fill4K(b *testing.B) {
	s := make([]int16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0x7f)
	}
}
func Benchmark03RangeInt16Clear64K(b *testing.B) {
	s := make([]int16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt16Clear64K(b *testing.B) {
	s := make([]int16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0)
	}
}
func Benchmark03RangeInt16Fill64K(b *testing.B) {
	s := make([]int16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt16Fill64K(b *testing.B) {
	s := make([]int16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0x7f)
	}
}
func Benchmark03RangeInt16Clear1M(b *testing.B) {
	s := make([]int16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt16Clear1M(b *testing.B) {
	s := make([]int16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0)
	}
}
func Benchmark03RangeInt16Fill1M(b *testing.B) {
	s := make([]int16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt16Fill1M(b *testing.B) {
	s := make([]int16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int16(s, 0x7f)
	}
}

func Benchmark03RangeInt32Clear8(b *testing.B) {
	s := make([]int32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt32Clear8(b *testing.B) {
	s := make([]int32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0)
	}
}
func Benchmark03RangeInt32Fill8(b *testing.B) {
	s := make([]int32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt32Fill8(b *testing.B) {
	s := make([]int32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0x7f)
	}
}
func Benchmark03RangeInt32Clear64(b *testing.B) {
	s := make([]int32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt32Clear64(b *testing.B) {
	s := make([]int32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0)
	}
}
func Benchmark03RangeInt32Fill64(b *testing.B) {
	s := make([]int32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt32Fill64(b *testing.B) {
	s := make([]int32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0x7f)
	}
}
func Benchmark03RangeInt32Clear1K(b *testing.B) {
	s := make([]int32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt32Clear1K(b *testing.B) {
	s := make([]int32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0)
	}
}
func Benchmark03RangeInt32Fill1K(b *testing.B) {
	s := make([]int32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt32Fill1K(b *testing.B) {
	s := make([]int32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0x7f)
	}
}
func Benchmark03RangeInt32Clear4K(b *testing.B) {
	s := make([]int32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt32Clear4K(b *testing.B) {
	s := make([]int32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0)
	}
}
func Benchmark03RangeInt32Fill4K(b *testing.B) {
	s := make([]int32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt32Fill4K(b *testing.B) {
	s := make([]int32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0x7f)
	}
}
func Benchmark03RangeInt32Clear64K(b *testing.B) {
	s := make([]int32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt32Clear64K(b *testing.B) {
	s := make([]int32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0)
	}
}
func Benchmark03RangeInt32Fill64K(b *testing.B) {
	s := make([]int32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt32Fill64K(b *testing.B) {
	s := make([]int32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0x7f)
	}
}
func Benchmark03RangeInt32Clear1M(b *testing.B) {
	s := make([]int32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt32Clear1M(b *testing.B) {
	s := make([]int32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0)
	}
}
func Benchmark03RangeInt32Fill1M(b *testing.B) {
	s := make([]int32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt32Fill1M(b *testing.B) {
	s := make([]int32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int32(s, 0x7f)
	}
}

func Benchmark03RangeInt64Clear8(b *testing.B) {
	s := make([]int64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt64Clear8(b *testing.B) {
	s := make([]int64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0)
	}
}
func Benchmark03RangeInt64Fill8(b *testing.B) {
	s := make([]int64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt64Fill8(b *testing.B) {
	s := make([]int64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0x7f)
	}
}
func Benchmark03RangeInt64Clear64(b *testing.B) {
	s := make([]int64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt64Clear64(b *testing.B) {
	s := make([]int64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0)
	}
}
func Benchmark03RangeInt64Fill64(b *testing.B) {
	s := make([]int64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt64Fill64(b *testing.B) {
	s := make([]int64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0x7f)
	}
}
func Benchmark03RangeInt64Clear1K(b *testing.B) {
	s := make([]int64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt64Clear1K(b *testing.B) {
	s := make([]int64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0)
	}
}
func Benchmark03RangeInt64Fill1K(b *testing.B) {
	s := make([]int64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt64Fill1K(b *testing.B) {
	s := make([]int64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0x7f)
	}
}
func Benchmark03RangeInt64Clear4K(b *testing.B) {
	s := make([]int64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt64Clear4K(b *testing.B) {
	s := make([]int64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0)
	}
}
func Benchmark03RangeInt64Fill4K(b *testing.B) {
	s := make([]int64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt64Fill4K(b *testing.B) {
	s := make([]int64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0x7f)
	}
}
func Benchmark03RangeInt64Clear64K(b *testing.B) {
	s := make([]int64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt64Clear64K(b *testing.B) {
	s := make([]int64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0)
	}
}
func Benchmark03RangeInt64Fill64K(b *testing.B) {
	s := make([]int64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt64Fill64K(b *testing.B) {
	s := make([]int64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0x7f)
	}
}
func Benchmark03RangeInt64Clear1M(b *testing.B) {
	s := make([]int64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetInt64Clear1M(b *testing.B) {
	s := make([]int64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0)
	}
}
func Benchmark03RangeInt64Fill1M(b *testing.B) {
	s := make([]int64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetInt64Fill1M(b *testing.B) {
	s := make([]int64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Int64(s, 0x7f)
	}
}

func Benchmark03RangeUintClear8(b *testing.B) {
	s := make([]uint, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintClear8(b *testing.B) {
	s := make([]uint, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0)
	}
}
func Benchmark03RangeUintFill8(b *testing.B) {
	s := make([]uint, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintFill8(b *testing.B) {
	s := make([]uint, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0x7f)
	}
}
func Benchmark03RangeUintClear64(b *testing.B) {
	s := make([]uint, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintClear64(b *testing.B) {
	s := make([]uint, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0)
	}
}
func Benchmark03RangeUintFill64(b *testing.B) {
	s := make([]uint, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintFill64(b *testing.B) {
	s := make([]uint, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0x7f)
	}
}
func Benchmark03RangeUintClear1K(b *testing.B) {
	s := make([]uint, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintClear1K(b *testing.B) {
	s := make([]uint, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0)
	}
}
func Benchmark03RangeUintFill1K(b *testing.B) {
	s := make([]uint, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintFill1K(b *testing.B) {
	s := make([]uint, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0x7f)
	}
}
func Benchmark03RangeUintClear4K(b *testing.B) {
	s := make([]uint, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintClear4K(b *testing.B) {
	s := make([]uint, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0)
	}
}
func Benchmark03RangeUintFill4K(b *testing.B) {
	s := make([]uint, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintFill4K(b *testing.B) {
	s := make([]uint, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0x7f)
	}
}
func Benchmark03RangeUintClear64K(b *testing.B) {
	s := make([]uint, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintClear64K(b *testing.B) {
	s := make([]uint, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0)
	}
}
func Benchmark03RangeUintFill64K(b *testing.B) {
	s := make([]uint, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintFill64K(b *testing.B) {
	s := make([]uint, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0x7f)
	}
}
func Benchmark03RangeUintClear1M(b *testing.B) {
	s := make([]uint, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintClear1M(b *testing.B) {
	s := make([]uint, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0)
	}
}
func Benchmark03RangeUintFill1M(b *testing.B) {
	s := make([]uint, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintFill1M(b *testing.B) {
	s := make([]uint, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint(s, 0x7f)
	}
}

func Benchmark03RangeByteClear8(b *testing.B) {
	s := make([]byte, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetByteClear8(b *testing.B) {
	s := make([]byte, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0)
	}
}
func Benchmark03RangeByteFill8(b *testing.B) {
	s := make([]byte, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetByteFill8(b *testing.B) {
	s := make([]byte, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0x7f)
	}
}
func Benchmark03RangeByteClear64(b *testing.B) {
	s := make([]byte, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetByteClear64(b *testing.B) {
	s := make([]byte, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0)
	}
}
func Benchmark03RangeByteFill64(b *testing.B) {
	s := make([]byte, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetByteFill64(b *testing.B) {
	s := make([]byte, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0x7f)
	}
}
func Benchmark03RangeByteClear1K(b *testing.B) {
	s := make([]byte, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetByteClear1K(b *testing.B) {
	s := make([]byte, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0)
	}
}
func Benchmark03RangeByteFill1K(b *testing.B) {
	s := make([]byte, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetByteFill1K(b *testing.B) {
	s := make([]byte, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0x7f)
	}
}
func Benchmark03RangeByteClear4K(b *testing.B) {
	s := make([]byte, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetByteClear4K(b *testing.B) {
	s := make([]byte, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0)
	}
}
func Benchmark03RangeByteFill4K(b *testing.B) {
	s := make([]byte, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetByteFill4K(b *testing.B) {
	s := make([]byte, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0x7f)
	}
}
func Benchmark03RangeByteClear64K(b *testing.B) {
	s := make([]byte, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetByteClear64K(b *testing.B) {
	s := make([]byte, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0)
	}
}
func Benchmark03RangeByteFill64K(b *testing.B) {
	s := make([]byte, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetByteFill64K(b *testing.B) {
	s := make([]byte, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0x7f)
	}
}
func Benchmark03RangeByteClear1M(b *testing.B) {
	s := make([]byte, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetByteClear1M(b *testing.B) {
	s := make([]byte, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0)
	}
}
func Benchmark03RangeByteFill1M(b *testing.B) {
	s := make([]byte, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetByteFill1M(b *testing.B) {
	s := make([]byte, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Byte(s, 0x7f)
	}
}

func Benchmark03RangeUint16Clear8(b *testing.B) {
	s := make([]uint16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint16Clear8(b *testing.B) {
	s := make([]uint16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0)
	}
}
func Benchmark03RangeUint16Fill8(b *testing.B) {
	s := make([]uint16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint16Fill8(b *testing.B) {
	s := make([]uint16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0x7f)
	}
}
func Benchmark03RangeUint16Clear64(b *testing.B) {
	s := make([]uint16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint16Clear64(b *testing.B) {
	s := make([]uint16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0)
	}
}
func Benchmark03RangeUint16Fill64(b *testing.B) {
	s := make([]uint16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint16Fill64(b *testing.B) {
	s := make([]uint16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0x7f)
	}
}
func Benchmark03RangeUint16Clear1K(b *testing.B) {
	s := make([]uint16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint16Clear1K(b *testing.B) {
	s := make([]uint16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0)
	}
}
func Benchmark03RangeUint16Fill1K(b *testing.B) {
	s := make([]uint16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint16Fill1K(b *testing.B) {
	s := make([]uint16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0x7f)
	}
}
func Benchmark03RangeUint16Clear4K(b *testing.B) {
	s := make([]uint16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint16Clear4K(b *testing.B) {
	s := make([]uint16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0)
	}
}
func Benchmark03RangeUint16Fill4K(b *testing.B) {
	s := make([]uint16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint16Fill4K(b *testing.B) {
	s := make([]uint16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0x7f)
	}
}
func Benchmark03RangeUint16Clear64K(b *testing.B) {
	s := make([]uint16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint16Clear64K(b *testing.B) {
	s := make([]uint16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0)
	}
}
func Benchmark03RangeUint16Fill64K(b *testing.B) {
	s := make([]uint16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint16Fill64K(b *testing.B) {
	s := make([]uint16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0x7f)
	}
}
func Benchmark03RangeUint16Clear1M(b *testing.B) {
	s := make([]uint16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint16Clear1M(b *testing.B) {
	s := make([]uint16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0)
	}
}
func Benchmark03RangeUint16Fill1M(b *testing.B) {
	s := make([]uint16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint16Fill1M(b *testing.B) {
	s := make([]uint16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint16(s, 0x7f)
	}
}

func Benchmark03RangeUint32Clear8(b *testing.B) {
	s := make([]uint32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint32Clear8(b *testing.B) {
	s := make([]uint32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0)
	}
}
func Benchmark03RangeUint32Fill8(b *testing.B) {
	s := make([]uint32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint32Fill8(b *testing.B) {
	s := make([]uint32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0x7f)
	}
}
func Benchmark03RangeUint32Clear64(b *testing.B) {
	s := make([]uint32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint32Clear64(b *testing.B) {
	s := make([]uint32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0)
	}
}
func Benchmark03RangeUint32Fill64(b *testing.B) {
	s := make([]uint32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint32Fill64(b *testing.B) {
	s := make([]uint32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0x7f)
	}
}
func Benchmark03RangeUint32Clear1K(b *testing.B) {
	s := make([]uint32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint32Clear1K(b *testing.B) {
	s := make([]uint32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0)
	}
}
func Benchmark03RangeUint32Fill1K(b *testing.B) {
	s := make([]uint32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint32Fill1K(b *testing.B) {
	s := make([]uint32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0x7f)
	}
}
func Benchmark03RangeUint32Clear4K(b *testing.B) {
	s := make([]uint32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint32Clear4K(b *testing.B) {
	s := make([]uint32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0)
	}
}
func Benchmark03RangeUint32Fill4K(b *testing.B) {
	s := make([]uint32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint32Fill4K(b *testing.B) {
	s := make([]uint32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0x7f)
	}
}
func Benchmark03RangeUint32Clear64K(b *testing.B) {
	s := make([]uint32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint32Clear64K(b *testing.B) {
	s := make([]uint32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0)
	}
}
func Benchmark03RangeUint32Fill64K(b *testing.B) {
	s := make([]uint32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint32Fill64K(b *testing.B) {
	s := make([]uint32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0x7f)
	}
}
func Benchmark03RangeUint32Clear1M(b *testing.B) {
	s := make([]uint32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint32Clear1M(b *testing.B) {
	s := make([]uint32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0)
	}
}
func Benchmark03RangeUint32Fill1M(b *testing.B) {
	s := make([]uint32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint32Fill1M(b *testing.B) {
	s := make([]uint32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint32(s, 0x7f)
	}
}

func Benchmark03RangeUint64Clear8(b *testing.B) {
	s := make([]uint64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint64Clear8(b *testing.B) {
	s := make([]uint64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0)
	}
}
func Benchmark03RangeUint64Fill8(b *testing.B) {
	s := make([]uint64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint64Fill8(b *testing.B) {
	s := make([]uint64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0x7f)
	}
}
func Benchmark03RangeUint64Clear64(b *testing.B) {
	s := make([]uint64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint64Clear64(b *testing.B) {
	s := make([]uint64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0)
	}
}
func Benchmark03RangeUint64Fill64(b *testing.B) {
	s := make([]uint64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint64Fill64(b *testing.B) {
	s := make([]uint64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0x7f)
	}
}
func Benchmark03RangeUint64Clear1K(b *testing.B) {
	s := make([]uint64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint64Clear1K(b *testing.B) {
	s := make([]uint64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0)
	}
}
func Benchmark03RangeUint64Fill1K(b *testing.B) {
	s := make([]uint64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint64Fill1K(b *testing.B) {
	s := make([]uint64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0x7f)
	}
}
func Benchmark03RangeUint64Clear4K(b *testing.B) {
	s := make([]uint64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint64Clear4K(b *testing.B) {
	s := make([]uint64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0)
	}
}
func Benchmark03RangeUint64Fill4K(b *testing.B) {
	s := make([]uint64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint64Fill4K(b *testing.B) {
	s := make([]uint64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0x7f)
	}
}
func Benchmark03RangeUint64Clear64K(b *testing.B) {
	s := make([]uint64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint64Clear64K(b *testing.B) {
	s := make([]uint64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0)
	}
}
func Benchmark03RangeUint64Fill64K(b *testing.B) {
	s := make([]uint64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint64Fill64K(b *testing.B) {
	s := make([]uint64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0x7f)
	}
}
func Benchmark03RangeUint64Clear1M(b *testing.B) {
	s := make([]uint64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUint64Clear1M(b *testing.B) {
	s := make([]uint64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0)
	}
}
func Benchmark03RangeUint64Fill1M(b *testing.B) {
	s := make([]uint64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUint64Fill1M(b *testing.B) {
	s := make([]uint64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uint64(s, 0x7f)
	}
}

func Benchmark03RangeUintptrClear8(b *testing.B) {
	s := make([]uintptr, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintptrClear8(b *testing.B) {
	s := make([]uintptr, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0)
	}
}
func Benchmark03RangeUintptrFill8(b *testing.B) {
	s := make([]uintptr, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintptrFill8(b *testing.B) {
	s := make([]uintptr, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0x7f)
	}
}
func Benchmark03RangeUintptrClear64(b *testing.B) {
	s := make([]uintptr, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintptrClear64(b *testing.B) {
	s := make([]uintptr, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0)
	}
}
func Benchmark03RangeUintptrFill64(b *testing.B) {
	s := make([]uintptr, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintptrFill64(b *testing.B) {
	s := make([]uintptr, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0x7f)
	}
}
func Benchmark03RangeUintptrClear1K(b *testing.B) {
	s := make([]uintptr, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintptrClear1K(b *testing.B) {
	s := make([]uintptr, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0)
	}
}
func Benchmark03RangeUintptrFill1K(b *testing.B) {
	s := make([]uintptr, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintptrFill1K(b *testing.B) {
	s := make([]uintptr, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0x7f)
	}
}
func Benchmark03RangeUintptrClear4K(b *testing.B) {
	s := make([]uintptr, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintptrClear4K(b *testing.B) {
	s := make([]uintptr, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0)
	}
}
func Benchmark03RangeUintptrFill4K(b *testing.B) {
	s := make([]uintptr, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintptrFill4K(b *testing.B) {
	s := make([]uintptr, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0x7f)
	}
}
func Benchmark03RangeUintptrClear64K(b *testing.B) {
	s := make([]uintptr, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintptrClear64K(b *testing.B) {
	s := make([]uintptr, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0)
	}
}
func Benchmark03RangeUintptrFill64K(b *testing.B) {
	s := make([]uintptr, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintptrFill64K(b *testing.B) {
	s := make([]uintptr, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0x7f)
	}
}
func Benchmark03RangeUintptrClear1M(b *testing.B) {
	s := make([]uintptr, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetUintptrClear1M(b *testing.B) {
	s := make([]uintptr, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0)
	}
}
func Benchmark03RangeUintptrFill1M(b *testing.B) {
	s := make([]uintptr, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetUintptrFill1M(b *testing.B) {
	s := make([]uintptr, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Uintptr(s, 0x7f)
	}
}

func Benchmark03RangeFloat32Clear8(b *testing.B) {
	s := make([]float32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat32Clear8(b *testing.B) {
	s := make([]float32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0)
	}
}
func Benchmark03RangeFloat32Fill8(b *testing.B) {
	s := make([]float32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat32Fill8(b *testing.B) {
	s := make([]float32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0x7f)
	}
}
func Benchmark03RangeFloat32Clear64(b *testing.B) {
	s := make([]float32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat32Clear64(b *testing.B) {
	s := make([]float32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0)
	}
}
func Benchmark03RangeFloat32Fill64(b *testing.B) {
	s := make([]float32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat32Fill64(b *testing.B) {
	s := make([]float32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0x7f)
	}
}
func Benchmark03RangeFloat32Clear1K(b *testing.B) {
	s := make([]float32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat32Clear1K(b *testing.B) {
	s := make([]float32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0)
	}
}
func Benchmark03RangeFloat32Fill1K(b *testing.B) {
	s := make([]float32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat32Fill1K(b *testing.B) {
	s := make([]float32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0x7f)
	}
}
func Benchmark03RangeFloat32Clear4K(b *testing.B) {
	s := make([]float32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat32Clear4K(b *testing.B) {
	s := make([]float32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0)
	}
}
func Benchmark03RangeFloat32Fill4K(b *testing.B) {
	s := make([]float32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat32Fill4K(b *testing.B) {
	s := make([]float32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0x7f)
	}
}
func Benchmark03RangeFloat32Clear64K(b *testing.B) {
	s := make([]float32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat32Clear64K(b *testing.B) {
	s := make([]float32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0)
	}
}
func Benchmark03RangeFloat32Fill64K(b *testing.B) {
	s := make([]float32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat32Fill64K(b *testing.B) {
	s := make([]float32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0x7f)
	}
}
func Benchmark03RangeFloat32Clear1M(b *testing.B) {
	s := make([]float32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat32Clear1M(b *testing.B) {
	s := make([]float32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0)
	}
}
func Benchmark03RangeFloat32Fill1M(b *testing.B) {
	s := make([]float32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat32Fill1M(b *testing.B) {
	s := make([]float32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float32(s, 0x7f)
	}
}

func Benchmark03RangeFloat64Clear8(b *testing.B) {
	s := make([]float64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat64Clear8(b *testing.B) {
	s := make([]float64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0)
	}
}
func Benchmark03RangeFloat64Fill8(b *testing.B) {
	s := make([]float64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat64Fill8(b *testing.B) {
	s := make([]float64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0x7f)
	}
}
func Benchmark03RangeFloat64Clear64(b *testing.B) {
	s := make([]float64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat64Clear64(b *testing.B) {
	s := make([]float64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0)
	}
}
func Benchmark03RangeFloat64Fill64(b *testing.B) {
	s := make([]float64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat64Fill64(b *testing.B) {
	s := make([]float64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0x7f)
	}
}
func Benchmark03RangeFloat64Clear1K(b *testing.B) {
	s := make([]float64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat64Clear1K(b *testing.B) {
	s := make([]float64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0)
	}
}
func Benchmark03RangeFloat64Fill1K(b *testing.B) {
	s := make([]float64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat64Fill1K(b *testing.B) {
	s := make([]float64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0x7f)
	}
}
func Benchmark03RangeFloat64Clear4K(b *testing.B) {
	s := make([]float64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat64Clear4K(b *testing.B) {
	s := make([]float64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0)
	}
}
func Benchmark03RangeFloat64Fill4K(b *testing.B) {
	s := make([]float64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat64Fill4K(b *testing.B) {
	s := make([]float64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0x7f)
	}
}
func Benchmark03RangeFloat64Clear64K(b *testing.B) {
	s := make([]float64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat64Clear64K(b *testing.B) {
	s := make([]float64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0)
	}
}
func Benchmark03RangeFloat64Fill64K(b *testing.B) {
	s := make([]float64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat64Fill64K(b *testing.B) {
	s := make([]float64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0x7f)
	}
}
func Benchmark03RangeFloat64Clear1M(b *testing.B) {
	s := make([]float64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03MemsetFloat64Clear1M(b *testing.B) {
	s := make([]float64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0)
	}
}
func Benchmark03RangeFloat64Fill1M(b *testing.B) {
	s := make([]float64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03MemsetFloat64Fill1M(b *testing.B) {
	s := make([]float64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Float64(s, 0x7f)
	}
}
