// This file was generated by gen_memset.rb and should not be edited by hand.

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

package optimized

import (
	"reflect"
	"testing"
)

func TestMemsetIntSlice(t *testing.T) {
	a := make([]int, 1024)
	b := make([]int, len(a))
	c := make([]int, len(a))

	MemsetIntSlice(a, 0x7f)
	memsetIntSlice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetIntSlice(a, 0)
	memsetIntSlice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetInt8Slice(t *testing.T) {
	a := make([]int8, 1024)
	b := make([]int8, len(a))
	c := make([]int8, len(a))

	MemsetInt8Slice(a, 0x7f)
	memsetInt8Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetInt8Slice(a, 0)
	memsetInt8Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetInt16Slice(t *testing.T) {
	a := make([]int16, 1024)
	b := make([]int16, len(a))
	c := make([]int16, len(a))

	MemsetInt16Slice(a, 0x7f)
	memsetInt16Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetInt16Slice(a, 0)
	memsetInt16Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetInt32Slice(t *testing.T) {
	a := make([]int32, 1024)
	b := make([]int32, len(a))
	c := make([]int32, len(a))

	MemsetInt32Slice(a, 0x7f)
	memsetInt32Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetInt32Slice(a, 0)
	memsetInt32Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetInt64Slice(t *testing.T) {
	a := make([]int64, 1024)
	b := make([]int64, len(a))
	c := make([]int64, len(a))

	MemsetInt64Slice(a, 0x7f)
	memsetInt64Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetInt64Slice(a, 0)
	memsetInt64Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetUintSlice(t *testing.T) {
	a := make([]uint, 1024)
	b := make([]uint, len(a))
	c := make([]uint, len(a))

	MemsetUintSlice(a, 0x7f)
	memsetUintSlice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetUintSlice(a, 0)
	memsetUintSlice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetByteSlice(t *testing.T) {
	a := make([]byte, 1024)
	b := make([]byte, len(a))
	c := make([]byte, len(a))

	MemsetByteSlice(a, 0x7f)
	memsetByteSlice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetByteSlice(a, 0)
	memsetByteSlice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetUint16Slice(t *testing.T) {
	a := make([]uint16, 1024)
	b := make([]uint16, len(a))
	c := make([]uint16, len(a))

	MemsetUint16Slice(a, 0x7f)
	memsetUint16Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetUint16Slice(a, 0)
	memsetUint16Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetUint32Slice(t *testing.T) {
	a := make([]uint32, 1024)
	b := make([]uint32, len(a))
	c := make([]uint32, len(a))

	MemsetUint32Slice(a, 0x7f)
	memsetUint32Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetUint32Slice(a, 0)
	memsetUint32Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetUint64Slice(t *testing.T) {
	a := make([]uint64, 1024)
	b := make([]uint64, len(a))
	c := make([]uint64, len(a))

	MemsetUint64Slice(a, 0x7f)
	memsetUint64Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetUint64Slice(a, 0)
	memsetUint64Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetUintptrSlice(t *testing.T) {
	a := make([]uintptr, 1024)
	b := make([]uintptr, len(a))
	c := make([]uintptr, len(a))

	MemsetUintptrSlice(a, 0x7f)
	memsetUintptrSlice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetUintptrSlice(a, 0)
	memsetUintptrSlice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetFloat32Slice(t *testing.T) {
	a := make([]float32, 1024)
	b := make([]float32, len(a))
	c := make([]float32, len(a))

	MemsetFloat32Slice(a, 0x7f)
	memsetFloat32Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetFloat32Slice(a, 0)
	memsetFloat32Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}

func TestMemsetFloat64Slice(t *testing.T) {
	a := make([]float64, 1024)
	b := make([]float64, len(a))
	c := make([]float64, len(a))

	MemsetFloat64Slice(a, 0x7f)
	memsetFloat64Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	MemsetFloat64Slice(a, 0)
	memsetFloat64Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}
