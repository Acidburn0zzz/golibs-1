#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

COPYRIGHT = <<EOF
// This file was generated by #{File.basename __FILE__} and should not be edited by hand.

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

EOF

STUB_BUILD_FLAGS = <<EOF
// +build !amd64

EOF

ASM_HEADER = <<EOF
#include "textflag.h"
EOF

PACKAGE = <<EOF
package optimized

EOF

FUNC = <<EOF
// Memset__Type__Slice fills a []__type__ with value n.
func Memset__Type__Slice(s []__type__, n __type__)
func memset__Type__Slice(s []__type__, n __type__) {
	for i := range s {
		s[i] = n
	}
}
EOF

ASM_AMD64 = <<EOF
// func Memset__Type__Slice(s []__type__, n __type__)
TEXT ·Memset__Type__Slice(SB), NOSPLIT, $0
	MOVQ data+0(FP), DI
	MOVQ len+8(FP), CX
	MOV__width__ n+24(FP), AX
	REP
	STOS__width__               // memset(data, n, len)
	RET
EOF

ASM_STUB = <<EOF
// func Memset__Type__Slice(s []__type__, n __type__)
TEXT ·Memset__Type__Slice(SB), NOSPLIT, $0
	JMP ·memset__Type__Slice(SB)
EOF

TEST = <<EOF
func TestMemset__Type__Slice(t *testing.T) {
	a := make([]__type__, 1024)
	b := make([]__type__, len(a))
	c := make([]__type__, len(a))

	Memset__Type__Slice(a, 0x7f)
	memset__Type__Slice(b, 0x7f)
	for i := range c {
		c[i] = 0x7f
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}

	Memset__Type__Slice(a, 0)
	memset__Type__Slice(b, 0)
	for i := range c {
		c[i] = 0
	}

	if !reflect.DeepEqual(a, c) {
		t.Errorf("%v != %v", a, c)
	}
	if !reflect.DeepEqual(b, c) {
		t.Errorf("%v != %v", b, c)
	}
}
EOF

BENCH = <<EOF
func Benchmark03__Type__RangeClear__BenchSize__(b *testing.B) {
	s := make([]__type__, __benchsize__)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03__Type__MemsetClear__BenchSize__(b *testing.B) {
	s := make([]__type__, __benchsize__)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Memset__Type__Slice(s, 0)
	}
}
func Benchmark03__Type__RangeFill__BenchSize__(b *testing.B) {
	s := make([]__type__, __benchsize__)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03__Type__MemsetFill__BenchSize__(b *testing.B) {
	s := make([]__type__, __benchsize__)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Memset__Type__Slice(s, 0x7f)
	}
}
EOF

types = [
  %w[int Q],
  %w[int8 B],
  %w[int16 W],
  %w[int32 L],
  %w[int64 Q],
  %w[uint Q],
  %w[byte B],
  %w[uint16 W],
  %w[uint32 L],
  %w[uint64 Q],
  %w[uintptr Q],
  %w[float32 L],
  %w[float64 Q],
]

benchmarks = [
  %w[8   1<<3],
  %w[64  1<<6],
  %w[1K  1<<10],
  %w[4K  1<<12],
  %w[64K 1<<16],
  %w[1M  1<<20],
]

def gsub text, type, width, benchsize = nil
  text.gsub('__type__', type)
      .gsub('__Type__', type.capitalize)
      .gsub('__BenchSize__', benchsize[0])
      .gsub('__benchsize__', benchsize[1])
      .gsub('__width__', width)
end

def expand s
  IO.popen ['expand'], 'r+' do |io|
    io.write s
    io.close_write
    return io.read
  end
end

File.open 'memset.go', 'w' do |f|
  f.puts COPYRIGHT
  f.puts PACKAGE

  types.each do |type, w|
    f.puts gsub(FUNC, type, w, ['', ''])
  end
end

File.open 'memset_amd64.s', 'w' do |f|
  f.puts COPYRIGHT
  f.puts ASM_HEADER

  types.each do |type, w|
    f.puts
    f.puts gsub(ASM_AMD64, type, w, ['', ''])
  end
end

File.open 'memset_stub.s', 'w' do |f|
  f.puts COPYRIGHT
  f.puts STUB_BUILD_FLAGS
  f.puts ASM_HEADER

  types.each do |type, w|
    f.puts
    f.puts gsub(ASM_STUB, type, w, ['', ''])
  end
end

File.open 'memset_test.go', 'w' do |f|
  f.puts COPYRIGHT
  f.puts PACKAGE

  types.each do |type, w|
    f.puts gsub(TEST, type, w, ['', ''])
    f.puts
  end
end

File.open 'memset_bench_test.go', 'w' do |f|
  f.puts COPYRIGHT
  f.puts PACKAGE

  types.each do |type, w|
    benchmarks.each do |bench|
      f.puts gsub(BENCH, type, w, bench)
    end
    f.puts
  end
end

system 'goimports', '-w', *Dir['memset*.go']
system 'asmfmt', '-w', *Dir['memset*.s']

if ENV['BENCH'] == '1'
  File.open 'memset_bench_test.txt', 'w' do |f|
    version = %x(go version)

    types.each do |type, _|
      f.puts version

      IO.popen ['go', 'test', '-run=NONE', "-bench=#{type.capitalize}(Range|Memset)", '-benchmem'], 'r' do |io|
        buf = io.read
        f.puts expand(buf)
      end

      f.puts
    end
  end
end
