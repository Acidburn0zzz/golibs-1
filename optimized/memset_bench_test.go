// This file was generated by gen_memset.rb and should not be edited by hand.

// Copyright (c) 2018 Sung Pae <self@sungpae.com>
// Distributed under the MIT license.
// http://www.opensource.org/licenses/mit-license.php

package optimized

import "testing"

func Benchmark03IntRangeClear8(b *testing.B) {
	s := make([]int, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03IntMemsetClear8(b *testing.B) {
	s := make([]int, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0)
	}
}
func Benchmark03IntRangeFill8(b *testing.B) {
	s := make([]int, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03IntMemsetFill8(b *testing.B) {
	s := make([]int, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0x7f)
	}
}
func Benchmark03IntRangeClear64(b *testing.B) {
	s := make([]int, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03IntMemsetClear64(b *testing.B) {
	s := make([]int, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0)
	}
}
func Benchmark03IntRangeFill64(b *testing.B) {
	s := make([]int, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03IntMemsetFill64(b *testing.B) {
	s := make([]int, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0x7f)
	}
}
func Benchmark03IntRangeClear1K(b *testing.B) {
	s := make([]int, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03IntMemsetClear1K(b *testing.B) {
	s := make([]int, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0)
	}
}
func Benchmark03IntRangeFill1K(b *testing.B) {
	s := make([]int, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03IntMemsetFill1K(b *testing.B) {
	s := make([]int, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0x7f)
	}
}
func Benchmark03IntRangeClear4K(b *testing.B) {
	s := make([]int, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03IntMemsetClear4K(b *testing.B) {
	s := make([]int, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0)
	}
}
func Benchmark03IntRangeFill4K(b *testing.B) {
	s := make([]int, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03IntMemsetFill4K(b *testing.B) {
	s := make([]int, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0x7f)
	}
}
func Benchmark03IntRangeClear64K(b *testing.B) {
	s := make([]int, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03IntMemsetClear64K(b *testing.B) {
	s := make([]int, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0)
	}
}
func Benchmark03IntRangeFill64K(b *testing.B) {
	s := make([]int, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03IntMemsetFill64K(b *testing.B) {
	s := make([]int, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0x7f)
	}
}
func Benchmark03IntRangeClear1M(b *testing.B) {
	s := make([]int, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03IntMemsetClear1M(b *testing.B) {
	s := make([]int, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0)
	}
}
func Benchmark03IntRangeFill1M(b *testing.B) {
	s := make([]int, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03IntMemsetFill1M(b *testing.B) {
	s := make([]int, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetIntSlice(s, 0x7f)
	}
}

func Benchmark03Int8RangeClear8(b *testing.B) {
	s := make([]int8, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int8MemsetClear8(b *testing.B) {
	s := make([]int8, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0)
	}
}
func Benchmark03Int8RangeFill8(b *testing.B) {
	s := make([]int8, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int8MemsetFill8(b *testing.B) {
	s := make([]int8, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0x7f)
	}
}
func Benchmark03Int8RangeClear64(b *testing.B) {
	s := make([]int8, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int8MemsetClear64(b *testing.B) {
	s := make([]int8, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0)
	}
}
func Benchmark03Int8RangeFill64(b *testing.B) {
	s := make([]int8, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int8MemsetFill64(b *testing.B) {
	s := make([]int8, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0x7f)
	}
}
func Benchmark03Int8RangeClear1K(b *testing.B) {
	s := make([]int8, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int8MemsetClear1K(b *testing.B) {
	s := make([]int8, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0)
	}
}
func Benchmark03Int8RangeFill1K(b *testing.B) {
	s := make([]int8, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int8MemsetFill1K(b *testing.B) {
	s := make([]int8, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0x7f)
	}
}
func Benchmark03Int8RangeClear4K(b *testing.B) {
	s := make([]int8, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int8MemsetClear4K(b *testing.B) {
	s := make([]int8, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0)
	}
}
func Benchmark03Int8RangeFill4K(b *testing.B) {
	s := make([]int8, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int8MemsetFill4K(b *testing.B) {
	s := make([]int8, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0x7f)
	}
}
func Benchmark03Int8RangeClear64K(b *testing.B) {
	s := make([]int8, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int8MemsetClear64K(b *testing.B) {
	s := make([]int8, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0)
	}
}
func Benchmark03Int8RangeFill64K(b *testing.B) {
	s := make([]int8, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int8MemsetFill64K(b *testing.B) {
	s := make([]int8, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0x7f)
	}
}
func Benchmark03Int8RangeClear1M(b *testing.B) {
	s := make([]int8, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int8MemsetClear1M(b *testing.B) {
	s := make([]int8, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0)
	}
}
func Benchmark03Int8RangeFill1M(b *testing.B) {
	s := make([]int8, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int8MemsetFill1M(b *testing.B) {
	s := make([]int8, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt8Slice(s, 0x7f)
	}
}

func Benchmark03Int16RangeClear8(b *testing.B) {
	s := make([]int16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int16MemsetClear8(b *testing.B) {
	s := make([]int16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0)
	}
}
func Benchmark03Int16RangeFill8(b *testing.B) {
	s := make([]int16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int16MemsetFill8(b *testing.B) {
	s := make([]int16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0x7f)
	}
}
func Benchmark03Int16RangeClear64(b *testing.B) {
	s := make([]int16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int16MemsetClear64(b *testing.B) {
	s := make([]int16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0)
	}
}
func Benchmark03Int16RangeFill64(b *testing.B) {
	s := make([]int16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int16MemsetFill64(b *testing.B) {
	s := make([]int16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0x7f)
	}
}
func Benchmark03Int16RangeClear1K(b *testing.B) {
	s := make([]int16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int16MemsetClear1K(b *testing.B) {
	s := make([]int16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0)
	}
}
func Benchmark03Int16RangeFill1K(b *testing.B) {
	s := make([]int16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int16MemsetFill1K(b *testing.B) {
	s := make([]int16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0x7f)
	}
}
func Benchmark03Int16RangeClear4K(b *testing.B) {
	s := make([]int16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int16MemsetClear4K(b *testing.B) {
	s := make([]int16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0)
	}
}
func Benchmark03Int16RangeFill4K(b *testing.B) {
	s := make([]int16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int16MemsetFill4K(b *testing.B) {
	s := make([]int16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0x7f)
	}
}
func Benchmark03Int16RangeClear64K(b *testing.B) {
	s := make([]int16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int16MemsetClear64K(b *testing.B) {
	s := make([]int16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0)
	}
}
func Benchmark03Int16RangeFill64K(b *testing.B) {
	s := make([]int16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int16MemsetFill64K(b *testing.B) {
	s := make([]int16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0x7f)
	}
}
func Benchmark03Int16RangeClear1M(b *testing.B) {
	s := make([]int16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int16MemsetClear1M(b *testing.B) {
	s := make([]int16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0)
	}
}
func Benchmark03Int16RangeFill1M(b *testing.B) {
	s := make([]int16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int16MemsetFill1M(b *testing.B) {
	s := make([]int16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt16Slice(s, 0x7f)
	}
}

func Benchmark03Int32RangeClear8(b *testing.B) {
	s := make([]int32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int32MemsetClear8(b *testing.B) {
	s := make([]int32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0)
	}
}
func Benchmark03Int32RangeFill8(b *testing.B) {
	s := make([]int32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int32MemsetFill8(b *testing.B) {
	s := make([]int32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0x7f)
	}
}
func Benchmark03Int32RangeClear64(b *testing.B) {
	s := make([]int32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int32MemsetClear64(b *testing.B) {
	s := make([]int32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0)
	}
}
func Benchmark03Int32RangeFill64(b *testing.B) {
	s := make([]int32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int32MemsetFill64(b *testing.B) {
	s := make([]int32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0x7f)
	}
}
func Benchmark03Int32RangeClear1K(b *testing.B) {
	s := make([]int32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int32MemsetClear1K(b *testing.B) {
	s := make([]int32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0)
	}
}
func Benchmark03Int32RangeFill1K(b *testing.B) {
	s := make([]int32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int32MemsetFill1K(b *testing.B) {
	s := make([]int32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0x7f)
	}
}
func Benchmark03Int32RangeClear4K(b *testing.B) {
	s := make([]int32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int32MemsetClear4K(b *testing.B) {
	s := make([]int32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0)
	}
}
func Benchmark03Int32RangeFill4K(b *testing.B) {
	s := make([]int32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int32MemsetFill4K(b *testing.B) {
	s := make([]int32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0x7f)
	}
}
func Benchmark03Int32RangeClear64K(b *testing.B) {
	s := make([]int32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int32MemsetClear64K(b *testing.B) {
	s := make([]int32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0)
	}
}
func Benchmark03Int32RangeFill64K(b *testing.B) {
	s := make([]int32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int32MemsetFill64K(b *testing.B) {
	s := make([]int32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0x7f)
	}
}
func Benchmark03Int32RangeClear1M(b *testing.B) {
	s := make([]int32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int32MemsetClear1M(b *testing.B) {
	s := make([]int32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0)
	}
}
func Benchmark03Int32RangeFill1M(b *testing.B) {
	s := make([]int32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int32MemsetFill1M(b *testing.B) {
	s := make([]int32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt32Slice(s, 0x7f)
	}
}

func Benchmark03Int64RangeClear8(b *testing.B) {
	s := make([]int64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int64MemsetClear8(b *testing.B) {
	s := make([]int64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0)
	}
}
func Benchmark03Int64RangeFill8(b *testing.B) {
	s := make([]int64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int64MemsetFill8(b *testing.B) {
	s := make([]int64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0x7f)
	}
}
func Benchmark03Int64RangeClear64(b *testing.B) {
	s := make([]int64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int64MemsetClear64(b *testing.B) {
	s := make([]int64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0)
	}
}
func Benchmark03Int64RangeFill64(b *testing.B) {
	s := make([]int64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int64MemsetFill64(b *testing.B) {
	s := make([]int64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0x7f)
	}
}
func Benchmark03Int64RangeClear1K(b *testing.B) {
	s := make([]int64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int64MemsetClear1K(b *testing.B) {
	s := make([]int64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0)
	}
}
func Benchmark03Int64RangeFill1K(b *testing.B) {
	s := make([]int64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int64MemsetFill1K(b *testing.B) {
	s := make([]int64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0x7f)
	}
}
func Benchmark03Int64RangeClear4K(b *testing.B) {
	s := make([]int64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int64MemsetClear4K(b *testing.B) {
	s := make([]int64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0)
	}
}
func Benchmark03Int64RangeFill4K(b *testing.B) {
	s := make([]int64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int64MemsetFill4K(b *testing.B) {
	s := make([]int64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0x7f)
	}
}
func Benchmark03Int64RangeClear64K(b *testing.B) {
	s := make([]int64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int64MemsetClear64K(b *testing.B) {
	s := make([]int64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0)
	}
}
func Benchmark03Int64RangeFill64K(b *testing.B) {
	s := make([]int64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int64MemsetFill64K(b *testing.B) {
	s := make([]int64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0x7f)
	}
}
func Benchmark03Int64RangeClear1M(b *testing.B) {
	s := make([]int64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Int64MemsetClear1M(b *testing.B) {
	s := make([]int64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0)
	}
}
func Benchmark03Int64RangeFill1M(b *testing.B) {
	s := make([]int64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Int64MemsetFill1M(b *testing.B) {
	s := make([]int64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetInt64Slice(s, 0x7f)
	}
}

func Benchmark03UintRangeClear8(b *testing.B) {
	s := make([]uint, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintMemsetClear8(b *testing.B) {
	s := make([]uint, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0)
	}
}
func Benchmark03UintRangeFill8(b *testing.B) {
	s := make([]uint, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintMemsetFill8(b *testing.B) {
	s := make([]uint, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0x7f)
	}
}
func Benchmark03UintRangeClear64(b *testing.B) {
	s := make([]uint, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintMemsetClear64(b *testing.B) {
	s := make([]uint, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0)
	}
}
func Benchmark03UintRangeFill64(b *testing.B) {
	s := make([]uint, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintMemsetFill64(b *testing.B) {
	s := make([]uint, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0x7f)
	}
}
func Benchmark03UintRangeClear1K(b *testing.B) {
	s := make([]uint, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintMemsetClear1K(b *testing.B) {
	s := make([]uint, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0)
	}
}
func Benchmark03UintRangeFill1K(b *testing.B) {
	s := make([]uint, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintMemsetFill1K(b *testing.B) {
	s := make([]uint, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0x7f)
	}
}
func Benchmark03UintRangeClear4K(b *testing.B) {
	s := make([]uint, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintMemsetClear4K(b *testing.B) {
	s := make([]uint, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0)
	}
}
func Benchmark03UintRangeFill4K(b *testing.B) {
	s := make([]uint, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintMemsetFill4K(b *testing.B) {
	s := make([]uint, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0x7f)
	}
}
func Benchmark03UintRangeClear64K(b *testing.B) {
	s := make([]uint, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintMemsetClear64K(b *testing.B) {
	s := make([]uint, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0)
	}
}
func Benchmark03UintRangeFill64K(b *testing.B) {
	s := make([]uint, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintMemsetFill64K(b *testing.B) {
	s := make([]uint, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0x7f)
	}
}
func Benchmark03UintRangeClear1M(b *testing.B) {
	s := make([]uint, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintMemsetClear1M(b *testing.B) {
	s := make([]uint, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0)
	}
}
func Benchmark03UintRangeFill1M(b *testing.B) {
	s := make([]uint, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintMemsetFill1M(b *testing.B) {
	s := make([]uint, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintSlice(s, 0x7f)
	}
}

func Benchmark03ByteRangeClear8(b *testing.B) {
	s := make([]byte, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03ByteMemsetClear8(b *testing.B) {
	s := make([]byte, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0)
	}
}
func Benchmark03ByteRangeFill8(b *testing.B) {
	s := make([]byte, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03ByteMemsetFill8(b *testing.B) {
	s := make([]byte, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0x7f)
	}
}
func Benchmark03ByteRangeClear64(b *testing.B) {
	s := make([]byte, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03ByteMemsetClear64(b *testing.B) {
	s := make([]byte, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0)
	}
}
func Benchmark03ByteRangeFill64(b *testing.B) {
	s := make([]byte, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03ByteMemsetFill64(b *testing.B) {
	s := make([]byte, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0x7f)
	}
}
func Benchmark03ByteRangeClear1K(b *testing.B) {
	s := make([]byte, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03ByteMemsetClear1K(b *testing.B) {
	s := make([]byte, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0)
	}
}
func Benchmark03ByteRangeFill1K(b *testing.B) {
	s := make([]byte, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03ByteMemsetFill1K(b *testing.B) {
	s := make([]byte, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0x7f)
	}
}
func Benchmark03ByteRangeClear4K(b *testing.B) {
	s := make([]byte, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03ByteMemsetClear4K(b *testing.B) {
	s := make([]byte, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0)
	}
}
func Benchmark03ByteRangeFill4K(b *testing.B) {
	s := make([]byte, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03ByteMemsetFill4K(b *testing.B) {
	s := make([]byte, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0x7f)
	}
}
func Benchmark03ByteRangeClear64K(b *testing.B) {
	s := make([]byte, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03ByteMemsetClear64K(b *testing.B) {
	s := make([]byte, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0)
	}
}
func Benchmark03ByteRangeFill64K(b *testing.B) {
	s := make([]byte, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03ByteMemsetFill64K(b *testing.B) {
	s := make([]byte, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0x7f)
	}
}
func Benchmark03ByteRangeClear1M(b *testing.B) {
	s := make([]byte, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03ByteMemsetClear1M(b *testing.B) {
	s := make([]byte, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0)
	}
}
func Benchmark03ByteRangeFill1M(b *testing.B) {
	s := make([]byte, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03ByteMemsetFill1M(b *testing.B) {
	s := make([]byte, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetByteSlice(s, 0x7f)
	}
}

func Benchmark03Uint16RangeClear8(b *testing.B) {
	s := make([]uint16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint16MemsetClear8(b *testing.B) {
	s := make([]uint16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0)
	}
}
func Benchmark03Uint16RangeFill8(b *testing.B) {
	s := make([]uint16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint16MemsetFill8(b *testing.B) {
	s := make([]uint16, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0x7f)
	}
}
func Benchmark03Uint16RangeClear64(b *testing.B) {
	s := make([]uint16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint16MemsetClear64(b *testing.B) {
	s := make([]uint16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0)
	}
}
func Benchmark03Uint16RangeFill64(b *testing.B) {
	s := make([]uint16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint16MemsetFill64(b *testing.B) {
	s := make([]uint16, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0x7f)
	}
}
func Benchmark03Uint16RangeClear1K(b *testing.B) {
	s := make([]uint16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint16MemsetClear1K(b *testing.B) {
	s := make([]uint16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0)
	}
}
func Benchmark03Uint16RangeFill1K(b *testing.B) {
	s := make([]uint16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint16MemsetFill1K(b *testing.B) {
	s := make([]uint16, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0x7f)
	}
}
func Benchmark03Uint16RangeClear4K(b *testing.B) {
	s := make([]uint16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint16MemsetClear4K(b *testing.B) {
	s := make([]uint16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0)
	}
}
func Benchmark03Uint16RangeFill4K(b *testing.B) {
	s := make([]uint16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint16MemsetFill4K(b *testing.B) {
	s := make([]uint16, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0x7f)
	}
}
func Benchmark03Uint16RangeClear64K(b *testing.B) {
	s := make([]uint16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint16MemsetClear64K(b *testing.B) {
	s := make([]uint16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0)
	}
}
func Benchmark03Uint16RangeFill64K(b *testing.B) {
	s := make([]uint16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint16MemsetFill64K(b *testing.B) {
	s := make([]uint16, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0x7f)
	}
}
func Benchmark03Uint16RangeClear1M(b *testing.B) {
	s := make([]uint16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint16MemsetClear1M(b *testing.B) {
	s := make([]uint16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0)
	}
}
func Benchmark03Uint16RangeFill1M(b *testing.B) {
	s := make([]uint16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint16MemsetFill1M(b *testing.B) {
	s := make([]uint16, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint16Slice(s, 0x7f)
	}
}

func Benchmark03Uint32RangeClear8(b *testing.B) {
	s := make([]uint32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint32MemsetClear8(b *testing.B) {
	s := make([]uint32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0)
	}
}
func Benchmark03Uint32RangeFill8(b *testing.B) {
	s := make([]uint32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint32MemsetFill8(b *testing.B) {
	s := make([]uint32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0x7f)
	}
}
func Benchmark03Uint32RangeClear64(b *testing.B) {
	s := make([]uint32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint32MemsetClear64(b *testing.B) {
	s := make([]uint32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0)
	}
}
func Benchmark03Uint32RangeFill64(b *testing.B) {
	s := make([]uint32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint32MemsetFill64(b *testing.B) {
	s := make([]uint32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0x7f)
	}
}
func Benchmark03Uint32RangeClear1K(b *testing.B) {
	s := make([]uint32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint32MemsetClear1K(b *testing.B) {
	s := make([]uint32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0)
	}
}
func Benchmark03Uint32RangeFill1K(b *testing.B) {
	s := make([]uint32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint32MemsetFill1K(b *testing.B) {
	s := make([]uint32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0x7f)
	}
}
func Benchmark03Uint32RangeClear4K(b *testing.B) {
	s := make([]uint32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint32MemsetClear4K(b *testing.B) {
	s := make([]uint32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0)
	}
}
func Benchmark03Uint32RangeFill4K(b *testing.B) {
	s := make([]uint32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint32MemsetFill4K(b *testing.B) {
	s := make([]uint32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0x7f)
	}
}
func Benchmark03Uint32RangeClear64K(b *testing.B) {
	s := make([]uint32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint32MemsetClear64K(b *testing.B) {
	s := make([]uint32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0)
	}
}
func Benchmark03Uint32RangeFill64K(b *testing.B) {
	s := make([]uint32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint32MemsetFill64K(b *testing.B) {
	s := make([]uint32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0x7f)
	}
}
func Benchmark03Uint32RangeClear1M(b *testing.B) {
	s := make([]uint32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint32MemsetClear1M(b *testing.B) {
	s := make([]uint32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0)
	}
}
func Benchmark03Uint32RangeFill1M(b *testing.B) {
	s := make([]uint32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint32MemsetFill1M(b *testing.B) {
	s := make([]uint32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint32Slice(s, 0x7f)
	}
}

func Benchmark03Uint64RangeClear8(b *testing.B) {
	s := make([]uint64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint64MemsetClear8(b *testing.B) {
	s := make([]uint64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0)
	}
}
func Benchmark03Uint64RangeFill8(b *testing.B) {
	s := make([]uint64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint64MemsetFill8(b *testing.B) {
	s := make([]uint64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0x7f)
	}
}
func Benchmark03Uint64RangeClear64(b *testing.B) {
	s := make([]uint64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint64MemsetClear64(b *testing.B) {
	s := make([]uint64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0)
	}
}
func Benchmark03Uint64RangeFill64(b *testing.B) {
	s := make([]uint64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint64MemsetFill64(b *testing.B) {
	s := make([]uint64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0x7f)
	}
}
func Benchmark03Uint64RangeClear1K(b *testing.B) {
	s := make([]uint64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint64MemsetClear1K(b *testing.B) {
	s := make([]uint64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0)
	}
}
func Benchmark03Uint64RangeFill1K(b *testing.B) {
	s := make([]uint64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint64MemsetFill1K(b *testing.B) {
	s := make([]uint64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0x7f)
	}
}
func Benchmark03Uint64RangeClear4K(b *testing.B) {
	s := make([]uint64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint64MemsetClear4K(b *testing.B) {
	s := make([]uint64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0)
	}
}
func Benchmark03Uint64RangeFill4K(b *testing.B) {
	s := make([]uint64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint64MemsetFill4K(b *testing.B) {
	s := make([]uint64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0x7f)
	}
}
func Benchmark03Uint64RangeClear64K(b *testing.B) {
	s := make([]uint64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint64MemsetClear64K(b *testing.B) {
	s := make([]uint64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0)
	}
}
func Benchmark03Uint64RangeFill64K(b *testing.B) {
	s := make([]uint64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint64MemsetFill64K(b *testing.B) {
	s := make([]uint64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0x7f)
	}
}
func Benchmark03Uint64RangeClear1M(b *testing.B) {
	s := make([]uint64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Uint64MemsetClear1M(b *testing.B) {
	s := make([]uint64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0)
	}
}
func Benchmark03Uint64RangeFill1M(b *testing.B) {
	s := make([]uint64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Uint64MemsetFill1M(b *testing.B) {
	s := make([]uint64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUint64Slice(s, 0x7f)
	}
}

func Benchmark03UintptrRangeClear8(b *testing.B) {
	s := make([]uintptr, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintptrMemsetClear8(b *testing.B) {
	s := make([]uintptr, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0)
	}
}
func Benchmark03UintptrRangeFill8(b *testing.B) {
	s := make([]uintptr, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintptrMemsetFill8(b *testing.B) {
	s := make([]uintptr, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0x7f)
	}
}
func Benchmark03UintptrRangeClear64(b *testing.B) {
	s := make([]uintptr, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintptrMemsetClear64(b *testing.B) {
	s := make([]uintptr, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0)
	}
}
func Benchmark03UintptrRangeFill64(b *testing.B) {
	s := make([]uintptr, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintptrMemsetFill64(b *testing.B) {
	s := make([]uintptr, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0x7f)
	}
}
func Benchmark03UintptrRangeClear1K(b *testing.B) {
	s := make([]uintptr, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintptrMemsetClear1K(b *testing.B) {
	s := make([]uintptr, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0)
	}
}
func Benchmark03UintptrRangeFill1K(b *testing.B) {
	s := make([]uintptr, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintptrMemsetFill1K(b *testing.B) {
	s := make([]uintptr, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0x7f)
	}
}
func Benchmark03UintptrRangeClear4K(b *testing.B) {
	s := make([]uintptr, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintptrMemsetClear4K(b *testing.B) {
	s := make([]uintptr, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0)
	}
}
func Benchmark03UintptrRangeFill4K(b *testing.B) {
	s := make([]uintptr, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintptrMemsetFill4K(b *testing.B) {
	s := make([]uintptr, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0x7f)
	}
}
func Benchmark03UintptrRangeClear64K(b *testing.B) {
	s := make([]uintptr, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintptrMemsetClear64K(b *testing.B) {
	s := make([]uintptr, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0)
	}
}
func Benchmark03UintptrRangeFill64K(b *testing.B) {
	s := make([]uintptr, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintptrMemsetFill64K(b *testing.B) {
	s := make([]uintptr, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0x7f)
	}
}
func Benchmark03UintptrRangeClear1M(b *testing.B) {
	s := make([]uintptr, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03UintptrMemsetClear1M(b *testing.B) {
	s := make([]uintptr, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0)
	}
}
func Benchmark03UintptrRangeFill1M(b *testing.B) {
	s := make([]uintptr, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03UintptrMemsetFill1M(b *testing.B) {
	s := make([]uintptr, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetUintptrSlice(s, 0x7f)
	}
}

func Benchmark03Float32RangeClear8(b *testing.B) {
	s := make([]float32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float32MemsetClear8(b *testing.B) {
	s := make([]float32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0)
	}
}
func Benchmark03Float32RangeFill8(b *testing.B) {
	s := make([]float32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float32MemsetFill8(b *testing.B) {
	s := make([]float32, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0x7f)
	}
}
func Benchmark03Float32RangeClear64(b *testing.B) {
	s := make([]float32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float32MemsetClear64(b *testing.B) {
	s := make([]float32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0)
	}
}
func Benchmark03Float32RangeFill64(b *testing.B) {
	s := make([]float32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float32MemsetFill64(b *testing.B) {
	s := make([]float32, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0x7f)
	}
}
func Benchmark03Float32RangeClear1K(b *testing.B) {
	s := make([]float32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float32MemsetClear1K(b *testing.B) {
	s := make([]float32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0)
	}
}
func Benchmark03Float32RangeFill1K(b *testing.B) {
	s := make([]float32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float32MemsetFill1K(b *testing.B) {
	s := make([]float32, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0x7f)
	}
}
func Benchmark03Float32RangeClear4K(b *testing.B) {
	s := make([]float32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float32MemsetClear4K(b *testing.B) {
	s := make([]float32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0)
	}
}
func Benchmark03Float32RangeFill4K(b *testing.B) {
	s := make([]float32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float32MemsetFill4K(b *testing.B) {
	s := make([]float32, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0x7f)
	}
}
func Benchmark03Float32RangeClear64K(b *testing.B) {
	s := make([]float32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float32MemsetClear64K(b *testing.B) {
	s := make([]float32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0)
	}
}
func Benchmark03Float32RangeFill64K(b *testing.B) {
	s := make([]float32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float32MemsetFill64K(b *testing.B) {
	s := make([]float32, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0x7f)
	}
}
func Benchmark03Float32RangeClear1M(b *testing.B) {
	s := make([]float32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float32MemsetClear1M(b *testing.B) {
	s := make([]float32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0)
	}
}
func Benchmark03Float32RangeFill1M(b *testing.B) {
	s := make([]float32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float32MemsetFill1M(b *testing.B) {
	s := make([]float32, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat32Slice(s, 0x7f)
	}
}

func Benchmark03Float64RangeClear8(b *testing.B) {
	s := make([]float64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float64MemsetClear8(b *testing.B) {
	s := make([]float64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0)
	}
}
func Benchmark03Float64RangeFill8(b *testing.B) {
	s := make([]float64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float64MemsetFill8(b *testing.B) {
	s := make([]float64, 1<<3)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0x7f)
	}
}
func Benchmark03Float64RangeClear64(b *testing.B) {
	s := make([]float64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float64MemsetClear64(b *testing.B) {
	s := make([]float64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0)
	}
}
func Benchmark03Float64RangeFill64(b *testing.B) {
	s := make([]float64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float64MemsetFill64(b *testing.B) {
	s := make([]float64, 1<<6)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0x7f)
	}
}
func Benchmark03Float64RangeClear1K(b *testing.B) {
	s := make([]float64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float64MemsetClear1K(b *testing.B) {
	s := make([]float64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0)
	}
}
func Benchmark03Float64RangeFill1K(b *testing.B) {
	s := make([]float64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float64MemsetFill1K(b *testing.B) {
	s := make([]float64, 1<<10)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0x7f)
	}
}
func Benchmark03Float64RangeClear4K(b *testing.B) {
	s := make([]float64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float64MemsetClear4K(b *testing.B) {
	s := make([]float64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0)
	}
}
func Benchmark03Float64RangeFill4K(b *testing.B) {
	s := make([]float64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float64MemsetFill4K(b *testing.B) {
	s := make([]float64, 1<<12)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0x7f)
	}
}
func Benchmark03Float64RangeClear64K(b *testing.B) {
	s := make([]float64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float64MemsetClear64K(b *testing.B) {
	s := make([]float64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0)
	}
}
func Benchmark03Float64RangeFill64K(b *testing.B) {
	s := make([]float64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float64MemsetFill64K(b *testing.B) {
	s := make([]float64, 1<<16)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0x7f)
	}
}
func Benchmark03Float64RangeClear1M(b *testing.B) {
	s := make([]float64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0
		}
	}
}
func Benchmark03Float64MemsetClear1M(b *testing.B) {
	s := make([]float64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0)
	}
}
func Benchmark03Float64RangeFill1M(b *testing.B) {
	s := make([]float64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := range s {
			s[j] = 0x7f
		}
	}
}
func Benchmark03Float64MemsetFill1M(b *testing.B) {
	s := make([]float64, 1<<20)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		MemsetFloat64Slice(s, 0x7f)
	}
}
